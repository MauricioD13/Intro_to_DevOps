---
- name: Setup user, Python environment and FastAPI service
  hosts: all
  environment:
    MYSQL_HOST: "localhost"
    MYSQL_USER: "{{ db_user }}"
    MYSQL_PASSWORD: "{{ db_pass }}"
    MYSQL_DATABASE: "{{ db_name }}"
  become: true
  vars_files:
    - vars.yml
  vars:
    username: pythondev
    user_password: "{{ user_password }}"
    dependencies_packages:
      - python3-pip
      - python3-dev
      - python3-setuptools
      - python3-venv
      - python3-passlib
      - mysql-server
      - mysql-client
      - python3-mysqldb
      - libmysqlclient-dev
      - libpwquality-tools
  tasks:
    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
    - name: Install Python and development packages
      apt:
        name: "{{ dependencies_packages }}"
        state: present

    - name: Create user group
      group:
        name: "{{ username }}"
        state: present

    - name: Create user account
      user:
        name: "{{ username }}"
        password: "{{ password | password_hash('sha512') }}"
        group: "{{ username }}"
        shell: /bin/bash/
        create_home: yes
        state: present

    # Server security
    - name: Set strong password policy
      lineinfile:
        path: /etc/security/pwquality.conf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      loop:
        - { regexp: "^minlen", line: "minlen = 12" }
        - { regexp: "^ucredit", line: "ucredit = -1" }
        - { regexp: "^lcredit", line: "lcredit = -1" }
        - { regexp: "^dcredit", line: "dcredit = -1" }
        - { regexp: "^ocredit", line: "ocredit = -1" }

    - name: Configure SSH security
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      loop:
        - { regexp: "^PermitRootLogin", line: "PermitRootLogin no" }
        - {
            regexp: "^PasswordAuthentication",
            line: "PasswordAuthentication yes",
          }
        - { regexp: "^X11Forwarding", line: "X11Forwarding no" }

    - name: Set up UFW firewall
      ufw:
        rule: "{{ item.rule }}"
        port: "{{ item.port }}"
        proto: "{{ item.proto }}"
        state: enabled
      loop:
        - { rule: "allow", port: "22", proto: "tcp" } # SSH
        - { rule: "allow", port: "8000", proto: "tcp" } # FastAPI
        - { rule: "allow", port: "80", proto: "tcp" } # HTTP
        - { rule: "allow", port: "443", proto: "tcp" } # HTTPS

    # MySQL configuration
    - name: Configure MySQL service
      service:
        name: mysql
        state: started
        enabled: yes

    - name: Creating mysql user
      mysql_user:
        name: "{{db_user}}"
        password: "{{db_pass}}"
        priv: "*.*:ALL"
        host: "%"
        state: present

    - name: Creating DB
      mysql_db:
        name: "{{db_name}}"
        state: present

    - name: Enable remote login to mysql
      lineinfile:
        path: /etc/mysql/mysql.conf.d/mysqld.cnf
        regexp: "^bind-address"
        line: "bind-address = 0.0.0.0"
        backup: yes
      notify:
        - restart mysql

    # Python configurations
    - name: Create destination directory
      file:
        path: "/home/{{ username }}/app"
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0755"

    - name: Copy application files from local /app directory
      copy:
        src: ../app/
        dest: "/home/{{ username }}/app"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: preserve

    - name: Create Python virtual environment
      #become_user: "{{ username }}"
      command: python3 -m venv /home/{{ username }}/app/.env
      args:
        creates: home/{{ username }}/app/.env

    - name: Install requirements
      #become_user: "{{ username }}"
      pip:
        requirements: "/home/{{ username }}/app/requirements.txt"
        virtualenv: "/home/{{ username }}/app/.env"
        state: present

    - name: Set environment variables

    - name: Create FastAPI systemd service
      template:
        src: fastapi.service.j2
        dest: /etc/systemd/system/fastapi.service

    - name: Start and enable FastAPI service
      systemd:
        name: fastapi
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Reboot server
      reboot:
        msg: "Rebooting server to apply changes"

  handlers:
    - name: restart mysql
      service:
        name: mysql
        state: restarted
